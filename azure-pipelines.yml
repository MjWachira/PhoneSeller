trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  publishFolder: '$(Build.ArtifactStagingDirectory)/publish'

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: Build
    displayName: 'Build Job'
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '6.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - task: NuGetCommand@2
      inputs:
        restoreSolution: '**/*.sln'

    - task: VSBuild@1
      inputs:
        solution: '**/*.sln'
        configuration: '$(buildConfiguration)'

    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '--configuration $(buildConfiguration) --output $(publishFolder)'
        zipAfterPublish: false

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(publishFolder)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: Deploy_Dev
  displayName: 'Deploy to Dev'
  dependsOn: Build
  jobs:
  - job: Deploy
    displayName: 'Deploy Job'
    steps:
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        artifactName: 'drop'
        downloadPath: '$(Pipeline.Workspace)'

    - script: |
        # Add script to deploy to Dev VM (e.g., copy files, configure IIS)
        echo "Deploying to Dev environment..."
      displayName: 'Deploy to Dev'

- stage: Approve_Production
  displayName: 'Approve Production Deployment'
  dependsOn: Deploy_Dev
  jobs:
  - job: WaitForApproval
    displayName: 'Wait for Approval'
    pool: server
    steps:
    - task: ManualValidation@0
      inputs:
        notifyUsers: 'your-email@example.com'
        instructions: 'Please approve the deployment to production.'

- stage: Deploy_Production
  displayName: 'Deploy to Production'
  dependsOn: Approve_Production
  jobs:
  - job: Deploy
    displayName: 'Deploy Job'
    steps:
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        artifactName: 'drop'
        downloadPath: '$(Pipeline.Workspace)'

    - script: |
        # Add script to deploy to Production VM (e.g., copy files, configure IIS)
        echo "Deploying to Production environment..."
      displayName: 'Deploy to Production'
